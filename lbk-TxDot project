import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import gc  # Garbage collection

# Read Data in chunks
path = r'C:\DATA (D)\Documents\Texas Tech University PhD\TTU PhD 2023-2026 Session\Research Assitant CECE\Simulation\Excel\Oct 7th\OL_051520038001038_39_MB_EB.xlsx'

# Use dtypes to minimize memory usage
dtype = {'X': np.float32, 'Y': np.float32, 'Z': np.float32}

# Load data
data = pd.read_excel(path, usecols=[0, 1, 2], names=['X', 'Y', 'Z'], header=0, dtype=dtype).dropna()

# Separate upper and lower Z values
dataUpperZ = data[data['Z'] > 9.77729988]
dataLowerZ = data[data['Z'] < 5.3190999]

# Extract coordinates (using float32 to save memory)
x1, y1, z1 = dataUpperZ['X'].values.astype(np.float32), dataUpperZ['Y'].values.astype(np.float32), dataUpperZ['Z'].values.astype(np.float32)
x2, y2, z2 = dataLowerZ['X'].values.astype(np.float32), dataLowerZ['Y'].values.astype(np.float32), dataLowerZ['Z'].values.astype(np.float32)

# Define maximum horizontal distance
d_max = 0.2
minVerticalDistance = np.inf
point1, point2 = None, None

# Define chunk size
chunk_size = 10000

# Chunk processing with optimized memory usage
for i in range(0, len(x1), chunk_size):
    xi1 = x1[i:i + chunk_size]
    yi1 = y1[i:i + chunk_size]
    zi1 = z1[i:i + chunk_size]

    for j in range(0, len(x2), chunk_size):
        xi2 = x2[j:j + chunk_size]
        yi2 = y2[j:j + chunk_size]
        zi2 = z2[j:j + chunk_size]

        # Calculate distances using broadcasting
        horizD = np.sqrt((xi1[:, None] - xi2)**2 + (yi1[:, None] - yi2)**2)
        vertiD = np.abs(zi1[:, None] - zi2)

        # Apply mask for horizontal distance limit
        mask = horizD <= d_max

        # Apply mask and find the minimum vertical distance
        masked_vertiD = np.where(mask, vertiD, np.inf)
        local_min_index = np.unravel_index(np.argmin(masked_vertiD), masked_vertiD.shape)
        local_minVerticalDistance = masked_vertiD[local_min_index]

        if local_minVerticalDistance < minVerticalDistance:
            minVerticalDistance = local_minVerticalDistance
            point1 = (xi1[local_min_index[0]], yi1[local_min_index[0]], zi1[local_min_index[0]])
            point2 = (xi2[local_min_index[1]], yi2[local_min_index[1]], zi2[local_min_index[1]])

        # Force garbage collection to free memory
        del xi2, yi2, zi2, horizD, vertiD, masked_vertiD
        gc.collect()

# Output results
print(f'Shortest Vertical Distance {d_max}: {minVerticalDistance}')
print(f'Points: {point1} and {point2}')

# Plotting
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x1, y1, z1, c='r', marker='o', label='Upper Z')
ax.scatter(x2, y2, z2, c='b', marker='^', label='Lower Z')

# Highlight the points with the shortest vertical distance
ax.scatter(*point1, c='g', marker='o', s=100, label='Point 1 (Shortest Dist)')
ax.scatter(*point2, c='y', marker='^', s=100, label='Point 2 (Shortest Dist)')
ax.plot([point1[0], point2[0]], [point1[1], point2[1]], [point1[2], point2[2]], 'k--', label='Shortest Vertical Distance')

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.legend()
plt.title('X, Y, & Z showing Shortest Vertical Distance')
plt.show()

# Plot X vs Z
plt.figure()
plt.scatter(x1, z1, c='r', label='Upper Z')
plt.scatter(x2, z2, c='b', label='Lower Z')
plt.scatter(point1[0], point1[2], c='g', s=100, label='Point 1 (Shortest Dist)')
plt.scatter(point2[0], point2[2], c='y', s=100, label='Point 2 (Shortest Dist)')
plt.plot([point1[0], point2[0]], [point1[2], point2[2]], 'k--', label='Shortest Vertical Distance')
plt.xlabel('X')
plt.ylabel('Z')
plt.legend()
plt.title('X vs Z showing Shortest Vertical Distance')
plt.show()

# Plot Y vs Z
plt.figure()
plt.scatter(y1, z1, c='r', label='Upper Z')
plt.scatter(y2, z2, c='b', label='Lower Z')
plt.scatter(point1[1], point1[2], c='g', s=100, label='Point 1 (Shortest Dist)')
plt.scatter(point2[1], point2[2], c='y', s=100, label='Point 2 (Shortest Dist)')
plt.plot([point1[1], point2[1]], [point1[2], point2[2]], 'k--', label='Shortest Vertical Distance')
plt.xlabel('Y')
plt.ylabel('Z')
plt.legend()
plt.title('Y vs Z showing Shortest Vertical Distance')
plt.show()
